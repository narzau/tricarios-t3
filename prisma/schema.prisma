// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Category {
    id        Int      @id @default(autoincrement())
    name      String  @unique
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    products  BaseProduct[]

}

model BaseProduct {
    id        Int      @id @default(autoincrement())
    productImage    String?
    code      String?      @unique
    displayName      String
    brand    String?
    model String?
    
    categoryId Int?
    category Category? @relation(fields: [categoryId], references: [id])
    
    stockedProducts StockedProduct[]
    boughtProducts BoughtProduct[]
    soldProducts SoldProduct[]


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([displayName, code, brand])
}

model BoughtProduct {
    id        Int      @id @default(autoincrement())
    quantity  Int
    price     Float?
    
    product   BaseProduct @relation(fields: [productId], references: [id])
    productId Int
    
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model StockedProduct {
    id        Int      @id @default(autoincrement())
    stock     Int
    listPrice Float
    discountPercentage   Float
    productId Int
    product   BaseProduct @relation(fields: [productId], references: [id])
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId])
}

model Sale {
    id        Int      @id @default(autoincrement())
    price     Float
    discountPercentage  Float @default(0)

    soldProducts SoldProduct[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model SoldProduct {
    id        Int      @id @default(autoincrement())
    quantity  Int
    price     Float
    discountPercentage   Float

    sale   Sale @relation(fields: [saleId], references: [id])
    saleId   Int

    product   BaseProduct @relation(fields: [productId], references: [id])
    productId Int
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String

    accounts      Account[]
    sessions      Session[]
    basedProducts           BaseProduct[]
    boughtProducts          BoughtProduct[]
    sales                   Sale[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
